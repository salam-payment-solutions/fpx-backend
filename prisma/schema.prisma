// This is your Prisma schema file for NestJS TypeScript project
// Learn more: https://pris.ly/d/prisma-schema
// NestJS + Prisma guide: https://docs.nestjs.com/recipes/prisma

// ==============================================================================
// DATABASE CONFIGURATION
// ==============================================================================

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ==============================================================================
// GENERATOR CONFIGURATION
// ==============================================================================

generator client {
    provider = "prisma-client-js"
    // output   = "../node_modules/.prisma/client"
}

// Optional: Generate database documentation
// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output   = "./docs"
// }

// ==============================================================================
// ENUMS
// ==============================================================================

/// User role enum - defines access levels in the application
enum Role {
    ADMIN @map("admin")
    USER  @map("user")

    @@map("roles")
}

/// Account status enum
enum AccountStatus {
    ACTIVE    @map("active")
    INACTIVE  @map("inactive")
    SUSPENDED @map("suspended")
    PENDING   @map("pending")

    @@map("account_statuses")
}

enum DefaultStatus {
    ACTIVE   @map("active")
    INACTIVE @map("inactive")

    @@map("default_statuses")
}

enum PaymentStatus {
    PENDING   @map("pending")
    COMPLETED @map("completed")
    FAILED    @map("failed")

    @@map("payment_statuses")
}

enum PaymentMessageToken {
    B2C
    B2B1
    B2B2
}

// ==============================================================================
// FUTURE MODELS (commented out for now)
// ==============================================================================

// /// Posts model - blog posts or articles
// model Post {
//   id        Int      @id @default(autoincrement())
//   title     String   @db.VarChar(255)
//   content   String   @db.Text
//   published Boolean  @default(false)
//   authorId  Int      @map("author_id")
//   
//   // Relations
//   author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   
//   // Timestamps
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
//   
//   @@index([authorId])
//   @@index([published])
//   @@map("posts")
// }

// /// Categories model - for organizing content
// model Category {
//   id          Int      @id @default(autoincrement())
//   name        String   @unique @db.VarChar(100)
//   description String?  @db.Text
//   slug        String   @unique @db.VarChar(100)
//   
//   // Timestamps
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
//   
//   @@map("categories")
// }
