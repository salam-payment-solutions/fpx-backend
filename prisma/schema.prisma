// This is your Prisma schema file for NestJS TypeScript project
// Learn more: https://pris.ly/d/prisma-schema
// NestJS + Prisma guide: https://docs.nestjs.com/recipes/prisma

// ==============================================================================
// DATABASE CONFIGURATION
// ==============================================================================

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ==============================================================================
// GENERATOR CONFIGURATION
// ==============================================================================

generator client {
    provider = "prisma-client-js"
    // Generate Prisma Client to node_modules for better NestJS integration
    output   = "../node_modules/.prisma/client"
}

// Optional: Generate database documentation
// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output   = "./docs"
// }

// ==============================================================================
// ENUMS
// ==============================================================================

/// User role enum - defines access levels in the application
enum Role {
    ADMIN @map("admin")
    USER  @map("user")

    @@map("roles")
}

/// Account status enum
enum AccountStatus {
    ACTIVE    @map("active")
    INACTIVE  @map("inactive")
    SUSPENDED @map("suspended")
    PENDING   @map("pending")

    @@map("account_statuses")
}

enum DefaultStatus {
    ACTIVE   @map("active")
    INACTIVE @map("inactive")

    @@map("default_statuses")
}

// ==============================================================================
// MODELS
// ==============================================================================

/// User model - represents application users
model User {
    // Primary key
    id Int @id @default(autoincrement()) @map("user_id")

    // Authentication fields
    email    String  @unique @db.VarChar(255)
    password String? @db.VarChar(255) // Optional for OAuth users

    // Profile information
    firstName String? @map("first_name") @db.VarChar(100)
    lastName  String? @map("last_name") @db.VarChar(100)
    fullName  String? @map("full_name") @db.VarChar(200) // Computed field or concatenated
    avatar    String? @db.Text // URL to profile picture
    bio       String? @db.Text

    // System fields
    role          Role          @default(USER)
    status        AccountStatus @default(PENDING)
    emailVerified Boolean       @default(false) @map("email_verified")

    // Timestamps (following NestJS conventions)
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
    updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(0) // Soft delete support

    // Indexes for better query performance
    @@index([email])
    @@index([status])
    @@index([role])
    @@index([createdAt])
    // Table mapping
    @@map("users")
}

// ==============================================================================
// MODELS
// ==============================================================================

/// User model - represents application users
enum PaymentStatus {
    PENDING   @map("pending")
    COMPLETED @map("completed")
    FAILED    @map("failed")

    @@map("payment_statuses")
}

model Payment {
    id        Int           @id @default(autoincrement())
    userEmail String        @map("user_email") @db.VarChar(255)
    userPhone String        @map("user_phone") @db.VarChar(15)
    userName  String        @map("user_name") @db.VarChar(255)
    amount    Decimal       @db.Decimal(16, 2)
    status    PaymentStatus @default(PENDING)
    createdAt DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
    updatedAt DateTime      @updatedAt @map("updated_at") @db.Timestamp(0)

    @@map("payments")
}

model Bank {
    id     Int           @id @default(autoincrement())
    name   String        @map("name") @db.VarChar(255)
    code   String        @map("code") @db.VarChar(255)
    status DefaultStatus @default(INACTIVE) @map("status")

    @@map("banks")
}

// ==============================================================================
// FUTURE MODELS (commented out for now)
// ==============================================================================

// /// Posts model - blog posts or articles
// model Post {
//   id        Int      @id @default(autoincrement())
//   title     String   @db.VarChar(255)
//   content   String   @db.Text
//   published Boolean  @default(false)
//   authorId  Int      @map("author_id")
//   
//   // Relations
//   author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   
//   // Timestamps
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
//   
//   @@index([authorId])
//   @@index([published])
//   @@map("posts")
// }

// /// Categories model - for organizing content
// model Category {
//   id          Int      @id @default(autoincrement())
//   name        String   @unique @db.VarChar(100)
//   description String?  @db.Text
//   slug        String   @unique @db.VarChar(100)
//   
//   // Timestamps
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
//   
//   @@map("categories")
// }
